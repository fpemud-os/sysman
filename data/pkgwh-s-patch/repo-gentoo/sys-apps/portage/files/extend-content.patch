diff -ru portage-3.0.18/lib/portage/dbapi/vartree.py portage-3.0.18-new/lib/portage/dbapi/vartree.py
--- portage-3.0.18/lib/portage/dbapi/vartree.py	2021-03-28 10:23:28.067698000 +0800
+++ portage-3.0.18-new/lib/portage/dbapi/vartree.py	2021-04-03 16:47:31.892262922 +0800
@@ -4778,6 +4778,13 @@
 			mode='w', encoding=_encodings['repo.content'],
 			errors='backslashreplace')
 
+ 		# add a CONTENTS_2 file to store addtional information
+ 		outfile2 = atomic_ofstream(_unicode_encode(
+ 			os.path.join(self.dbtmpdir, 'CONTENTS_2'),
+ 			encoding=_encodings['fs'], errors='strict'),
+ 			mode='w', encoding=_encodings['repo.content'],
+ 			errors='backslashreplace')
+
 		# Don't bump mtimes on merge since some application require
 		# preservation of timestamps.  This means that the unmerge phase must
 		# check to see if file belongs to an installed instance in the same
@@ -4790,7 +4797,7 @@
 
 		# we do a first merge; this will recurse through all files in our srcroot but also build up a
 		# "second hand" of symlinks to merge later
-		if self.mergeme(srcroot, destroot, outfile, secondhand,
+ 		if self.mergeme(srcroot, destroot, outfile, outfile2, secondhand,
 			self.settings["EPREFIX"].lstrip(os.sep), cfgfiledict, mymtime):
 			return 1
 
@@ -4802,7 +4809,7 @@
 			# couldn't get merged will be added to thirdhand.
 
 			thirdhand = []
-			if self.mergeme(srcroot, destroot, outfile, thirdhand,
+ 			if self.mergeme(srcroot, destroot, outfile, outfile2, thirdhand,
 				secondhand, cfgfiledict, mymtime):
 				return 1
 
@@ -4816,13 +4823,17 @@
 
 		if len(secondhand):
 			# force merge of remaining symlinks (broken or circular; oh well)
-			if self.mergeme(srcroot, destroot, outfile, None,
+ 			if self.mergeme(srcroot, destroot, outfile, outfile2, None,
 				secondhand, cfgfiledict, mymtime):
 				return 1
 
 		#restore umask
 		os.umask(prevmask)
 
+ 		#if we opened it, close it
+ 		outfile2.flush()
+ 		outfile2.close()
+
 		#if we opened it, close it
 		outfile.flush()
 		outfile.close()
@@ -4838,7 +4849,7 @@
 
 		return os.EX_OK
 
-	def mergeme(self, srcroot, destroot, outfile, secondhand, stufftomerge, cfgfiledict, thismtime):
+	def mergeme(self, srcroot, destroot, outfile, outfile2, secondhand, stufftomerge, cfgfiledict, thismtime):
 		"""
 
 		This function handles actual merging of the package contents to the livefs.
@@ -5053,6 +5064,16 @@
 							mtime_ns=mymtime,
 						)
 					)
+					outfile2.write(
+						self._format_contents_line(
+							node_type="sym",
+							abs_path=myrealdest,
+							symlink_target=myto,
+							mtime_ns=mymtime,
+							uid=mystat[4],
+							gid=mystat[5],
+						)
+					)
 				else:
 					showMessage(_("!!! Failed to move file.\n"),
 						level=logging.ERROR, noiselevel=-1)
@@ -5156,6 +5177,9 @@
 				outfile.write(
 					self._format_contents_line(node_type="dir", abs_path=myrealdest)
 				)
+				outfile2.write(
+					self._format_contents_line(node_type="dir", abs_path=myrealdest, perm=mystat[0], uid=mystat[4], gid=mystat[5])
+				)
 				# recurse and merge this directory
 				mergelist.extend(join(relative_path, child) for child in
 					os.listdir(join(srcroot, relative_path)))
@@ -5211,6 +5235,17 @@
 							mtime_ns=mymtime,
 						)
 					)
+					outfile2.write(
+						self._format_contents_line(
+							node_type="obj",
+							abs_path=myrealdest,
+							md5_digest=mymd5,
+							mtime_ns=mymtime,
+							perm=mystat[0],
+							uid=mystat[4],
+							gid=mystat[5],
+						)
+					)
 				showMessage("%s %s\n" % (zing,mydest))
 			else:
 				# we are merging a fifo or device node
@@ -5233,10 +5268,16 @@
 					outfile.write(
 						self._format_contents_line(node_type="fif", abs_path=myrealdest)
 					)
+					outfile2.write(
+						self._format_contents_line(node_type="fif", abs_path=myrealdest)		# why a package installs fifo??
+					)
 				else:
 					outfile.write(
 						self._format_contents_line(node_type="dev", abs_path=myrealdest)
 					)
+					outfile2.write(
+						self._format_contents_line(node_type="dev", abs_path=myrealdest)		# why a package installs devnode??
+					)
 				showMessage(zing + " " + mydest + "\n")
 
 	def _protect(self, cfgfiledict, protect_if_modified, src_md5,
@@ -5299,7 +5340,7 @@
 		return dest, protected, move_me
 
 	def _format_contents_line(
-		self, node_type, abs_path, md5_digest=None, symlink_target=None, mtime_ns=None
+		self, node_type, abs_path, md5_digest=None, symlink_target=None, mtime_ns=None, perm=None, uid=None, gid=None, 
 	):
 		fields = [node_type, abs_path]
 		if md5_digest is not None:
@@ -5308,6 +5349,12 @@
 			fields.append("-> {}".format(symlink_target))
 		if mtime_ns is not None:
 			fields.append(str(mtime_ns // 1000000000))
+		if perm is not None:
+			fields.append("%o" % (perm))
+		if uid is not None:
+			fields.append(str(uid))
+		if gid is not None:
+			fields.append(str(gid))
 		return "{}\n".format(" ".join(fields))
 
 	def _merged_path(self, path, lstatobj, exists=True):
